import asyncio
import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton,
                           CallbackQuery, LabeledPrice, PreCheckoutQuery, ContentType)
from aiogram.utils.callback_data import CallbackData
import keyboard as kb
import database
import states
from config import lp_token, stikcer_OK, stikcer_gerl, stiker_kit
from load_all import dp, bot, _

db = database.DBCommands()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º CallbackData –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–±–µ–∫–∞–º–∏, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∫—É–ø–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤
buy_item = CallbackData("buy", "item_id")


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(commands=["items"])
async def show_items(message: Message):
    # –î–æ—Å—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_items = await db.show_items()
    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º, –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞—è
    for num, item in enumerate(all_items):
        text = _("<b>–¢–æ–≤–∞—Ä</b> \t‚Ññ{id}: <u>{name}</u>\n"
                 "<b>–¶–µ–Ω–∞:</b> \t{price:,} –≥—Ä–Ω\n")
        markup = InlineKeyboardMarkup(
            inline_keyboard=
            [
                [
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–∫—É–ø–∏—Ç—å" –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–µ –∞–π–¥–∏—à–Ω–∏–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–±–µ–∫–∞
                    InlineKeyboardButton(text=_("–ö—É–ø–∏—Ç—å üíµ"), callback_data=buy_item.new(item_id=item.id))
                ]
                #         [InlineKeyboardButton(text=_("–ù–∞–ª–æ–∂–µ–Ω—ã–π –ø–ª–∞—Ç—ë–∂"), callback_data="NALOG")],
                # [InlineKeyboardButton(text=_("–û—Ç–º–µ–Ω–∞"), callback_data="close")]
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π "–∫—É–ø–∏—Ç—å"
        await message.answer(text=text.format(
            id=item.id,
            name=item.name,
            price=item.price / 100
        ),
            reply_markup=markup)
        # await message.answer_photo(
        #     photo=item.photo,
        #     caption=text.format(
        #         id=item.id,
        #         name=item.name,
        #         price=item.price / 100
        #     ),
        #     reply_markup=markup
        # )
        # –ú–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã
        await asyncio.sleep(0.3)
    await message.answer(_("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üîç : /help\n"
                           "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òé : /contact\n"
                           "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ üöö  : /delivery"),reply_markup=kb.markup_back)


# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–ª–ª–±–µ–∫–∞–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å buy_item.filter()
@dp.callback_query_handler(buy_item.filter())
async def buying_item(call: CallbackQuery, callback_data: dict, state: FSMContext):
    # –¢–æ, —á—Ç–æ –º—ã —É–∫–∞–∑–∞–ª–∏ –≤ CallbackData –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–¥ callback_data, –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç–∞–µ–º –∞–π–¥–∏—à–Ω–∏–∫
    item_id = int(callback_data.get("item_id"))
    await call.message.edit_reply_markup()
    # markup = InlineKeyboardMarkup(
    #     inline_keyboard=
    #     [
    #         [InlineKeyboardButton(text=_("–û—Ç–º–µ–Ω–∞"), callback_data="close")],
    #         [InlineKeyboardButton(text=_("–ù–∞–ª–æ–∂–µ–Ω—ã–π –ø–ª–∞—Ç—ë–∂"), callback_data="NALOG")],
    #     ]
    # )
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            # [InlineKeyboardButton(text=_("–ù–∞–ª–æ–∂–µ–Ω—ã–π –ø–ª–∞—Ç—ë–∂"), callback_data="NALOG")],
            [InlineKeyboardButton(text=_("–û—Ç–º–µ–Ω–∞ ‚ùå "), callback_data="close")]
        ]
    )

    # –î–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    item = await database.Item.get(item_id)
    if not item:
        await call.message.answer(_("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"))
        return

    text = _("–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä \"<b>{name}</b>\" üëç\n"
             "–¶–µ–Ω–∞: <i>{price:,} –≥—Ä–Ω/—à—Ç.</i>\n\n"
             "–í–æ–∑–º–æ–∂–Ω–∞ –æ–ø–ª—Ç–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é LiqPay.üí≥üí∞\n"
             "–ò–ª–∏ –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞–º —Ç–æ–≤–∞—Ä –Ω–∞–ª–æ–∂–µ–Ω—ã–º –ø–ª–∞—Ç–µ–∂–µ–º.üöö\n\n"
             "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>{name}</b>").format(name=item.name,
                                                             price=item.price / 100)
    await call.message.answer_photo(photo=item.photo)
    await call.message.answer(text, reply_markup=markup)
    await states.Purchase.EnterQuantity.set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –§–°–ú –∫–ª–∞—Å—Å —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–∫—É–ø–∫–∏
    await state.update_data(
        item=item,
        purchase=database.Purchase(
            item_id=item_id,
            purchase_time=datetime.datetime.now(),
            buyer=call.from_user.id
        )
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
@dp.message_handler(regexp=r"^(\d+)$", state=states.Purchase.EnterQuantity)
async def enter_quantity(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    quantity = int(message.text)
    if quantity == 0:
        await message.answer(_("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."))
        await states.Purchase.EnterQuantity.set()
    else:
        async with state.proxy() as data:  # –†–∞–±–æ—Ç–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –§–°–ú
            data["purchase"].quantity = quantity
            item = data["item"]
            amount = item.price * quantity
            data["purchase"].amount = amount

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        agree_button = InlineKeyboardButton(
        text=_("–°–æ–≥–ª–∞—Å–µ–Ω"),
        callback_data="agree"
        )
        change_button = InlineKeyboardButton(
        text=_("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ"),
        callback_data="change"
        )
        cancel_button = InlineKeyboardButton(
        text=_("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É"),
        callback_data="cancel"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(
            inline_keyboard=
            [
            [agree_button],  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [change_button],  # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [cancel_button]  # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            ]
        )
        await message.answer(
        _("–•–æ—Ä–æ—à–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å _ <i>{quantity}</i> _ \"<b>{name}</b>\" –ø–æ —Ü–µ–Ω–µ <b>{price:,} –≥—Ä–Ω/—à—Ç.</b>\n\n"
          "–ü–æ–ª—É—á–∏—Ç—Å—è <b>{amount:,}</b> –≥—Ä–Ω. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?").format(
            quantity=quantity,
            name=item.name,
            amount=amount / 100,
            price=item.price / 100
            ),
        reply_markup=markup)
        await states.Purchase.Approval.set()


# –¢–æ, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º - –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —ç—Ç–æ—Ç
@dp.message_handler(state=states.Purchase.EnterQuantity)
async def not_quantity(message: Message):
    await message.answer(_("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"))


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ
@dp.callback_query_handler(text_contains="cancel", state=states.Purchase)
async def approval(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await call.message.answer(_("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —ç—Ç—É –ø–æ–∫—É–ø–∫—É"))
    ##################################################
    await bot.send_sticker(call.from_user.id, stiker_kit)
    await asyncio.sleep(0.5)
    await call.message.answer(_("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã: /items\n"
                                "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: /contact"),reply_markup=kb.markup_back)
    await state.reset_state()


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª "–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
@dp.callback_query_handler(text_contains="change", state=states.Purchase.Approval)
async def approval(call: CallbackQuery):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await call.message.answer(_("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ."))
    await states.Purchase.EnterQuantity.set()


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª "—Å–æ–≥–ª–∞—Å–µ–Ω"
@dp.callback_query_handler(text_contains="agree", state=states.Purchase.Approval)
async def approval(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

    data = await state.get_data()
    purchase: database.Purchase = data.get("purchase")
    item: database.Item = data.get("item")
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ .create()
    await purchase.create()
    await asyncio.sleep(0.5)
    await bot.send_message(chat_id=call.from_user.id,
                           text=_("–û–ø–ª–∞—Ç–∏—Ç–µ <b>{amount:,} –≥—Ä–Ω.</b> –∏—Å–ø–æ–ª—å–∑—É—è LiqPay\n"
                                  "–∏–ª–∏ –æ—Ñ–æ—Ä–º–∏–≤ –Ω–∞–ª–æ–∂–µ–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ").format(amount=purchase.amount / 100))
    ################
    # --–ù–∏–∂–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã--
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç https://surik00.gitbooks.io/aiogram-lessons/content/chapter4.html
    # –ù–æ –ø—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —Ç–µ —É—Ä–æ–∫–∏ –ø–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ aiogram –∏ –¥–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å, —Ç–∞–∫ —á—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å
    # –Ω–µ—Å–æ—Å—Ç—ã–∫–æ–≤–∫–∏.
    ################
    currency = "UAH"
    need_name = True
    need_phone_number = True
    need_email = False
    need_shipping_address = False
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [InlineKeyboardButton(text=_("–ù–∞–ª–æ–∂–µ–Ω—ã–π –ø–ª–∞—Ç—ë–∂ üí∏"), callback_data="NALOG")],
            [InlineKeyboardButton(text=_("–û—Ç–º–µ–Ω–∞ ‚ùå"), callback_data="close")]
        ]
    )

    await bot.send_invoice(chat_id=call.from_user.id,
                           title=item.name,
                           description=item.name,
                           payload=str(purchase.id),
                           start_parameter=str(purchase.id),
                           currency=currency,
                           prices=[
                               LabeledPrice(label=item.name, amount=purchase.amount)
                           ],
                           provider_token=lp_token,
                           need_name=need_name,
                           need_phone_number=need_phone_number,
                           need_email=need_email,
                           need_shipping_address=need_shipping_address
                           )
    await bot.send_message(chat_id=call.from_user.id, text=(_("‚¨á–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–æ–∂–µ–Ω—ã–º –ø–ª–∞—Ç–µ–∂–µ–º‚¨á")), reply_markup=markup)
    await state.update_data(purchase=purchase)
    await states.Purchase.Payment.set()


@dp.pre_checkout_query_handler(state=states.Purchase.Payment)
async def checkout(query: PreCheckoutQuery, state: FSMContext):
    await bot.answer_pre_checkout_query(query.id, True)
    data = await state.get_data()
    purchase: database.Purchase = data.get("purchase")
    success = await check_payment(purchase)
    chat_id = query.from_user.id

    if success:
        await purchase.update(
            successful=True,
            shipping_address=query.order_info.shipping_address.to_python()
            if query.order_info.shipping_address
            else None,
            phone_number=query.order_info.phone_number,
            receiver=query.order_info.name,
            email=query.order_info.email
        ).apply()
        # await state.reset_state()
        markup = InlineKeyboardMarkup(
            inline_keyboard=
            [
                [InlineKeyboardButton(text=_("–î–æ—Å—Ç–∞–≤–∫–∞"), callback_data="post")],
                [InlineKeyboardButton(text=_("–ö–æ–Ω—Ç–∞–∫—Ç—ã"), callback_data="contacts")],
                [InlineKeyboardButton(text=_("–û—Ç–º–µ–Ω–∞ ‚ùå"), callback_data="close")]
            ]
        )

        await bot.send_message(chat_id, _("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É,"))
        await bot.send_sticker(chat_id, sticker=stikcer_OK)
        await asyncio.sleep(1.0)
        await bot.send_message(chat_id, _("–ú—ã –º–æ–∂–µ–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É\n"
                                          "–∏–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å\n–≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ ‚òé : /contact\n"
                                          "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã: üì¶ /items\n"
                                          ),reply_markup=markup)

    else:
        await bot.send_message(chat_id, _("–ü–æ–∫—É–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..."))


async def check_payment(purchase: database.Purchase):
    return True


@dp.callback_query_handler(text_contains="NALOG", state="*")
async def approval(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    data = await state.get_data()
    purchase: database.Purchase = data.get("purchase")
    item: database.Item = data.get("item")
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ .create()
    await asyncio.sleep(1.0)
    await bot.send_message(chat_id=call.from_user.id,
                           text=_("–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {name}.\n–û–±—â–∞—è —Å—É–º–º–∞ <b>{amount:,} –≥—Ä–Ω.</b>  "
                                  "").format(amount=purchase.amount / 100, name=item.name))
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [InlineKeyboardButton(text=_("–û—Ç–º–µ–Ω–∞ ‚ùå"), callback_data="close")]
        ]
    )
    await asyncio.sleep(1.5)
    await call.message.answer(_("–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                                "1. –î–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã\n"
                                "2. –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 2000 –≥—Ä–Ω –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏–µ–≤—É "
                                "–∏ –ö–∏–µ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                                "3. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 2Ô∏è‚É£4Ô∏è‚É£ —á–∞—Å–æ–≤\n"
                                "4. –í —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚ùó\n"
                                "5. –¢–æ–≤–∞—Ä –æ–±–º–µ–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç ‚ùó\n\n"
                                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"), reply_markup=markup)
    await asyncio.sleep(1.5)
    await call.message.answer(_("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –§–ò–û"))
    await states.Test.Q1.set()


@dp.message_handler(state=states.Test.Q1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    # –í–∞—Ä–∏–∞–Ω—Ç 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ key=var
    await state.update_data(answer1=answer)
    await message.answer(_("–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"))
    await states.Test.next()


@dp.message_handler(state=states.Test.Q2)
async def answer_q2(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer2=answer)
    await message.answer(_("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä –ö–∏–µ–≤, –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã ‚Ññ99"))
    await states.Test.next()


@dp.message_handler(state=states.Test.Q3)
async def answer_q3(message: types.Message, state: FSMContext):
    # –î–æ—Å—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    user_name = message.from_user.full_name
    data = await state.get_data()
    answer1 = data.get("answer1")
    answer2 = data.get("answer2")
    answer3 = message.text
    # answer4 = data.get("answer4")
    # answer5 = message.text
    data = await state.get_data()
    purchase: database.Purchase = data.get("purchase")
    item: database.Item = data.get("item")
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ .create()

    await message.answer(text=_("{answer1}, –≤—ã –∑–∞–∫–∞–∑–∞–ª–∏ <b>{name}</b>.\n–û–±—â–∞—è —Å—É–º–º–∞ <b>{amount:,} –≥—Ä–Ω.</b>\n–û–ø—Ç–ª–∞—Ç–∞ –Ω–∞–ª–æ–ª–µ–∂–Ω—ã–º "
                                "–ø–ª–∞—Ç–µ–∂–µ–º\n"
                                "–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {answer2}\n"
                                "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {answer3}").format(amount=purchase.amount / 100, name=item.name,
                                                                    answer3=answer3, answer1=answer1, answer2=answer2))
    await asyncio.sleep(1.5)
    await bot.send_message(-1001417763749, f"–ó–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è:  {user_name}.\n–ü–Ü–ë: {answer1}.\n–¢–µ–ª–µ—Ñ–æ–Ω: {answer2}.\n"
                                           f"–•–æ—á–µ –ø—Ä–∏–¥–±–∞—Ç–∏: {item.name}.\n–Ω–∞–ª–æ–∂–µ–Ω–∏–º –ø–ª–∞—Ç–µ–∂–µ–º\n"
                                           f"–ù–∞ —Å—É–º–º—É: {purchase.amount / 100} –≥—Ä–Ω\n"
                                           f"–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {answer3}.")
    await asyncio.sleep(1.4)
    await message.answer(_("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!"))
    await bot.send_sticker(message.chat.id, stikcer_gerl)
    await asyncio.sleep(1.4)
    await bot.send_message(message.chat.id, _("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶ : /items\n"
                                              "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òé : /contact"),reply_markup=kb.markup_back)

    # –í–∞—Ä–∏–∞–Ω—Ç 1
    await state.finish()


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ
@dp.callback_query_handler(text_contains="close", state="*")
async def approval(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await bot.send_sticker(call.from_user.id, stiker_kit)
    await call.message.answer(_("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —ç—Ç—É –ø–æ–∫—É–ø–∫—É"))
    await asyncio.sleep(0.5)
    await call.message.answer(_("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶ : /items\n"
                                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üîç : /help\n"
                                "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è: /contact\n"
                                "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ üöö :/delivery"),reply_markup=kb.markup_back)
    await state.reset_state()



@dp.callback_query_handler(text_contains="post", state="*")
async def approval(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    data = await state.get_data()
    purchase: database.Purchase = data.get("purchase")
    item: database.Item = data.get("item")
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ .create()
    await asyncio.sleep(1.0)
    await bot.send_message(chat_id=call.from_user.id,
                           text=_("–í—ã –ø—Ä–µ–æ–±—Ä–µ–ª–∏ {name}. –û–±—â–∞—è —Å—É–º–º–∞ <b>{amount:,} –≥—Ä–Ω.</b>  "
                                  "").format(amount=purchase.amount / 100, name=item.name))
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [InlineKeyboardButton(text=_("–û—Ç–º–µ–Ω–∞ ‚ùå"), callback_data="close")]
        ]
    )
    await asyncio.sleep(1.5)
    await call.message.answer(_("–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                                "1. –î–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã\n"
                                "2. –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 2000 –≥—Ä–Ω –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏–µ–≤—É "
                                "–∏ –ö–∏–µ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                                "3. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 2Ô∏è‚É£4Ô∏è‚É£ —á–∞—Å–æ–≤\n"
                                "4. –í —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚ùó\n"
                                "5. –¢–æ–≤–∞—Ä –æ–±–º–µ–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç ‚ùó\n\n"
                                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"), reply_markup=markup)
    await asyncio.sleep(1.5)
    await call.message.answer(_("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –§–ò–û"))
    await states.Purchase.Name_delivery.set()


@dp.message_handler(state=states.Purchase.Name_delivery)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    # –í–∞—Ä–∏–∞–Ω—Ç 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ key=var
    await state.update_data(answer1=answer)
    await message.answer(_("–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"))
    await states.Purchase.Phone_delivery.set()


@dp.message_handler(state=states.Purchase.Phone_delivery)
async def answer_q2(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer2=answer)
    await message.answer(_("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä –ö–∏–µ–≤, –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã ‚Ññ99"))
    await states.Purchase.Adress_delivery.set()


@dp.message_handler(state=states.Purchase.Adress_delivery)
async def answer_q3(message: types.Message, state: FSMContext):
    # –î–æ—Å—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    user_name = message.from_user.full_name
    data = await state.get_data()
    answer1 = data.get("answer1")
    answer2 = data.get("answer2")
    answer3 = message.text
    # answer4 = data.get("answer4")
    # answer5 = message.text
    data = await state.get_data()
    purchase: database.Purchase = data.get("purchase")
    item: database.Item = data.get("item")
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ .create()

    await message.answer(text=_("–í—ã –∫—É–ø–∏–ª–∏ <b>{name}</b>.\n–û–±—â–∞—è —Å—É–º–º–∞ <b>{amount:,} –≥—Ä–Ω.</b>\n"
                                "–û–ø—Ç–ª–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é LiqPay\n"
                                "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {answer3}\n").format(amount=purchase.amount / 100, name=item.name,
                                                                    answer3=answer3))
    await asyncio.sleep(1.5)
    await bot.send_message(-1001417763749, f"–ó–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è:  {user_name}. \n–ü–Ü–ë: {answer1}.\n–¢–µ–ª–µ—Ñ–æ–Ω: {answer2}."
                                           f" –ü—Ä–∏–¥–±–∞–≤: {item.name}.\n–ù–∞ —Å—É–º–º—É: {purchase.amount / 100} –≥—Ä–Ω\n"
                                           f"–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {answer3}.")
    await asyncio.sleep(1.4)
    await message.answer(_("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!"))
    await bot.send_sticker(message.chat.id, stikcer_gerl)
    await asyncio.sleep(1.4)
    await bot.send_message(message.chat.id, _("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶ : /items\n"
                                              "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è:  /contact"),reply_markup=kb.markup_back)

    # –í–∞—Ä–∏–∞–Ω—Ç 1
    await state.finish()


@dp.message_handler(content_types=ContentType.STICKER)
async def other_echo(message: Message):
    print(message)


@dp.message_handler(content_types=ContentType.DOCUMENT)
async def other_echo(message: Message):
    print(message)

@dp.message_handler(content_types=ContentType.PHOTO)
async def other_echo(message: Message):
    print(message)