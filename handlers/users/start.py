from aiogram import types
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

import database
from config import admin_id, sticker_start

from load_all import dp, bot, _
import keyboard as kb

# –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ç—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

db = database.DBCommands()


@dp.message_handler(CommandStart())
async def register_user(message: types.Message):
    user_name = message.from_user.full_name
    chat_id = message.from_user.id
    referral = message.get_args()
    user = await db.add_new_user(referral=referral)
    id = user.id
    count_users = await db.count_users()
    await bot.send_sticker(chat_id, sticker_start)

    # –û—Ç–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–æ–≤
    languages_markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—å—Å–∫–∞ üá∫üá¶", callback_data="lang_uk")],
            [
                InlineKeyboardButton(text="English üá∫üá∏", callback_data="lang_en"),
                InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"),
            ]
        ]
    )

    bot_username = (await bot.me).username
    bot_link = f"https://t.me/{bot_username}?start={id}"

    # –î–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏, –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é "_"
    # –í–º–µ—Å—Ç–æ "—Ç–µ–∫—Å—Ç" –ø–µ—Ä–µ–¥–∞–µ–º _("—Ç–µ–∫—Å—Ç")

    text = _("{user_name}, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞–≥–∞–∑–∏–Ω\n"
             f"<b><u>–ê–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫–∏ –∏ –î–µ–∑–∏–Ω—Ñ–µ–∫—Ç–∞–Ω—Ç—ã</u></b>\n"
             "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶ : /items\n"
             "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üîç : /help").format(user_name=user_name)

    if message.from_user.id == admin_id:
        text += _("\n"
                  "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: /add_item\n"
                  "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {count_users}").format(
            count_users=count_users,
            bot_link=bot_link
        )
    await bot.send_message(chat_id, text, reply_markup=languages_markup)


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä text_contains, –æ–Ω —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ call.data
@dp.callback_query_handler(text_contains="lang")
async def change_language(call: CallbackQuery):
    await call.message.edit_reply_markup()
    # –î–æ—Å—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ru)
    lang = call.data[-2:]
    await db.set_language(lang)


    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫, –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—ã–π, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º locale=lang

    await call.message.answer(_("–í–∞—à —è–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω"))
    await bot.send_message(chat_id=call.message.chat.id, text=_("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚¨áÔ∏è", locale=lang),
                           reply_markup=kb.main_markup)

